/* automatically generated by rust-bindgen */
/* then hacked --klk */
#![allow(unused_imports)]  // temporarily

use libc::{c_int, c_uint, c_ulonglong, c_void };

// maximum number of items that may be added
pub static UI_MAX_ITEMS:u32 = 4096;
// maximum size in bytes reserved for storage of application dependent data
// as passed to uiAllocData().
pub static UI_MAX_BUFFERSIZE:u32 = 1048576;
// maximum size in bytes of a single data buffer passed to uiAllocData().
pub static UI_MAX_DATASIZE:u32 = 4096;
// maximum depth of nested containers
pub static UI_MAX_DEPTH:u32 = 64;

pub type UIuint = c_uint;
pub enum Struct_UIcontext { }
pub type UIcontext = Struct_UIcontext;
pub type UIhandle = c_ulonglong;
pub type Enum_UIitemState = c_uint;
pub static UI_COLD: c_uint = 0;
pub static UI_HOT: c_uint = 1;
pub static UI_ACTIVE: c_uint = 2;
pub static UI_FROZEN: c_uint = 3;
pub type UIitemState = Enum_UIitemState;
pub type Enum_UIlayoutFlags = c_uint;
pub static UI_LEFT: c_uint = 1;
pub static UI_TOP: c_uint = 2;
pub static UI_RIGHT: c_uint = 4;
pub static UI_DOWN: c_uint = 8;
pub static UI_HFILL: c_uint = 5;
pub static UI_VFILL: c_uint = 10;
pub static UI_HCENTER: c_uint = 0;
pub static UI_VCENTER: c_uint = 0;
pub static UI_CENTER: c_uint = 0;
pub static UI_FILL: c_uint = 15;
pub type UIlayoutFlags = Enum_UIlayoutFlags;
pub type Enum_UIevent = c_uint;
pub static UI_BUTTON0_DOWN: c_uint = 1;
pub static UI_BUTTON0_UP: c_uint = 2;
pub static UI_BUTTON0_HOT_UP: c_uint = 4;
pub static UI_BUTTON0_CAPTURE: c_uint = 8;
pub static UI_APPEND: c_uint = 16;
pub type UIevent = Enum_UIevent;
pub type UIhandler =
    ::std::option::Option<extern "C" fn(arg1: c_int, arg2: UIevent)>;

#[repr(C)]
pub struct Struct_UIvec2;
#[repr(C)]
pub struct Union_Unnamed1 {
    pub data: [u32, ..2u],
}
impl Union_Unnamed1 {
    pub fn v(&mut self) -> *mut [c_int, ..2u] {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct_Unnamed2 {
    pub x: c_int,
    pub y: c_int,
}
pub type UIvec2 = Struct_UIvec2;
#[repr(C)]
pub struct Struct_UIrect;
#[repr(C)]
pub struct Union_Unnamed3 {
    pub data: [u32, ..4u],
}
impl Union_Unnamed3 {
    pub fn v(&mut self) -> *mut [c_int, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct_Unnamed4 {
    pub x: c_int,
    pub y: c_int,
    pub w: c_int,
    pub h: c_int,
}
pub type UIrect = Struct_UIrect;
extern "C" {
    pub fn uiCreateContext() -> *mut UIcontext;
    pub fn uiMakeCurrent(ctx: *mut UIcontext);
    pub fn uiDestroyContext(ctx: *mut UIcontext);
    pub fn uiSetCursor(x: c_int, y: c_int);
    pub fn uiGetCursor() -> UIvec2;
    pub fn uiGetCursorDelta() -> UIvec2;
    pub fn uiGetCursorStart() -> UIvec2;
    pub fn uiGetCursorStartDelta() -> UIvec2;
    pub fn uiSetButton(button: c_int, enabled: c_int);
    pub fn uiGetButton(button: c_int) -> c_int;
    pub fn uiClear();
    pub fn uiLayout();
    pub fn uiProcess();
    pub fn uiItem() -> c_int;
    pub fn uiSetFrozen(item: c_int, enable: c_int);
    pub fn uiSetHandle(item: c_int, handle: UIhandle);
    pub fn uiAllocData(item: c_int, size: c_int) ->
     *mut c_void;
    pub fn uiSetHandler(item: c_int, handler: UIhandler,
                        flags: c_int);
    pub fn uiAppend(item: c_int, child: c_int) ->
     c_int;
    pub fn uiSetSize(item: c_int, w: c_int, h: c_int);
    pub fn uiSetLayout(item: c_int, flags: c_int);
    pub fn uiSetMargins(item: c_int, l: c_int,
                        t: c_int, r: c_int, b: c_int);
    pub fn uiSetRelToLeft(item: c_int, other: c_int);
    pub fn uiSetRelToTop(item: c_int, other: c_int);
    pub fn uiSetRelToRight(item: c_int, other: c_int);
    pub fn uiSetRelToDown(item: c_int, other: c_int);
    pub fn uiFirstChild(item: c_int) -> c_int;
    pub fn uiLastChild(item: c_int) -> c_int;
    pub fn uiParent(item: c_int) -> c_int;
    pub fn uiNextSibling(item: c_int) -> c_int;
    pub fn uiPrevSibling(item: c_int) -> c_int;
    pub fn uiGetState(item: c_int) -> UIitemState;
    pub fn uiGetHandle(item: c_int) -> UIhandle;
    pub fn uiGetData(item: c_int) -> *const c_void;
    pub fn uiGetHandler(item: c_int) -> UIhandler;
    pub fn uiGetHandlerFlags(item: c_int) -> c_int;
    pub fn uiGetChildCount(item: c_int) -> c_int;
    pub fn uiGetChildId(item: c_int) -> c_int;
    pub fn uiGetRect(item: c_int) -> UIrect;
    pub fn uiGetActiveRect() -> UIrect;
    pub fn uiGetWidth(item: c_int) -> c_int;
    pub fn uiGetHeight(item: c_int) -> c_int;
    pub fn uiGetLayout(item: c_int) -> c_int;
    pub fn uiGetMarginLeft(item: c_int) -> c_int;
    pub fn uiGetMarginTop(item: c_int) -> c_int;
    pub fn uiGetMarginRight(item: c_int) -> c_int;
    pub fn uiGetMarginDown(item: c_int) -> c_int;
    pub fn uiGetRelToLeft(item: c_int) -> c_int;
    pub fn uiGetRelToTop(item: c_int) -> c_int;
    pub fn uiGetRelToRight(item: c_int) -> c_int;
    pub fn uiGetRelToDown(item: c_int) -> c_int;
}
